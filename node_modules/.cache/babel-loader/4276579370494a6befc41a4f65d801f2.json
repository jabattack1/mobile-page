{"ast":null,"code":"import dispatcher from './phone-dispatcher';\nimport { EventEmitter } from 'events';\nconst chatStoreChangeEvent = 'hone-store-change-event';\n\nclass ChatStore extends EventEmitter {\n  constructor() {\n    super();\n    dispatcher.register(this.handleAction.bind(this));\n    this._newMessage = ''; // this._messageList = []\n\n    this._messageList = [{\n      id: 1,\n      content: 'hello'\n    }];\n  }\n\n  get newMessage() {\n    return this._newMessage;\n  }\n\n  get messageList() {\n    return this._messageList;\n  }\n\n  handleAction(action) {\n    console.log(action.type);\n\n    switch (action.type) {\n      case 'change-new-message':\n        // do something with state here\n        this._newMessage = action.payload.content;\n        this.emitChange();\n        break;\n\n      case 'submit-new-message':\n        this._checkSubmitNewMessage();\n\n        this.emitChange();\n        break;\n    }\n  }\n\n  _checkSubmitNewMessage() {\n    if (this._newMessage.trim().length > 0) {\n      let message = {\n        id: Date.now(),\n        content: this._newMessage\n      };\n\n      this._messageList.push(message);\n\n      this._newMessage = ''; // this.setState({\n      // \tmessageList: this.props.messageList,\n      // \tnewMessage: ''\n      // });\n    }\n  }\n\n  emitChange() {\n    this.emit(chatStoreChangeEvent);\n  }\n\n  addEventListener(callback) {\n    this.on('chat-store-change-event', callback);\n  }\n\n  removeEventListner(callback) {\n    this.removeListener(chatStoreChangeEvent, callback);\n  }\n\n}\n\nlet chatStore = new ChatStore();\nexport default chatStore;","map":{"version":3,"sources":["/Users/peter/src/new/mobile-page/mobileApp/src/phone/phone-store.js"],"names":["dispatcher","EventEmitter","chatStoreChangeEvent","ChatStore","constructor","register","handleAction","bind","_newMessage","_messageList","id","content","newMessage","messageList","action","console","log","type","payload","emitChange","_checkSubmitNewMessage","trim","length","message","Date","now","push","emit","addEventListener","callback","on","removeEventListner","removeListener","chatStore"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AACA,SAAQC,YAAR,QAA2B,QAA3B;AAEA,MAAMC,oBAAoB,GAAG,yBAA7B;;AAEA,MAAMC,SAAN,SAAwBF,YAAxB,CAAqC;AAEnCG,EAAAA,WAAW,GAAE;AACZ;AAEAJ,IAAAA,UAAU,CAACK,QAAX,CAAoB,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AAEA,SAAKC,WAAL,GAAmB,EAAnB,CALY,CAMZ;;AACA,SAAKC,YAAL,GAAoB,CAAC;AAACC,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,OAAO,EAAC;AAAf,KAAD,CAApB;AACA;;AAED,MAAIC,UAAJ,GAAgB;AACf,WAAO,KAAKJ,WAAZ;AACA;;AAED,MAAIK,WAAJ,GAAiB;AAChB,WAAO,KAAKJ,YAAZ;AACA;;AAEDH,EAAAA,YAAY,CAACQ,MAAD,EAAQ;AAEnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;;AAEA,YAAOH,MAAM,CAACG,IAAd;AACC,WAAK,oBAAL;AACA;AACC,aAAKT,WAAL,GAAmBM,MAAM,CAACI,OAAP,CAAeP,OAAlC;AACA,aAAKQ,UAAL;AACA;;AAED,WAAK,oBAAL;AACA,aAAKC,sBAAL;;AACA,aAAKD,UAAL;AACC;AAVF;AAYA;;AAEDC,EAAAA,sBAAsB,GAAE;AACvB,QAAI,KAAKZ,WAAL,CAAiBa,IAAjB,GAAwBC,MAAxB,GAAiC,CAArC,EAAwC;AACxC,UAAIC,OAAO,GAAG;AACbb,QAAAA,EAAE,EAAEc,IAAI,CAACC,GAAL,EADS;AAEbd,QAAAA,OAAO,EAAE,KAAKH;AAFD,OAAd;;AAKA,WAAKC,YAAL,CAAkBiB,IAAlB,CAAuBH,OAAvB;;AACA,WAAKf,WAAL,GAAmB,EAAnB,CAPwC,CASxC;AACA;AACA;AACA;AACA;AACA;;AAEDW,EAAAA,UAAU,GAAE;AACX,SAAKQ,IAAL,CAAUzB,oBAAV;AACA;;AAED0B,EAAAA,gBAAgB,CAACC,QAAD,EAAU;AACzB,SAAKC,EAAL,CAAQ,yBAAR,EAAmCD,QAAnC;AACA;;AAEDE,EAAAA,kBAAkB,CAACF,QAAD,EAAU;AAC3B,SAAKG,cAAL,CAAoB9B,oBAApB,EAA0C2B,QAA1C;AACA;;AAjEkC;;AAqErC,IAAII,SAAS,GAAG,IAAI9B,SAAJ,EAAhB;AAEA,eAAe8B,SAAf","sourcesContent":["import dispatcher from './phone-dispatcher';\nimport {EventEmitter} from 'events';\n\nconst chatStoreChangeEvent = 'hone-store-change-event';\n\nclass ChatStore extends EventEmitter {\n\n \tconstructor(){\n \t\tsuper();\n\n \t\tdispatcher.register(this.handleAction.bind(this));\n\n \t\tthis._newMessage = '';\n \t\t// this._messageList = []\n \t\tthis._messageList = [{id:1, content:'hello'}];\n \t}\n\n \tget newMessage(){\n \t\treturn this._newMessage;\n \t}\n\n \tget messageList(){\n \t\treturn this._messageList;\n \t}\n\n \thandleAction(action){\n\n \t\tconsole.log(action.type);\n\n \t\tswitch(action.type){\n \t\t\tcase 'change-new-message':\n \t\t\t// do something with state here\n \t\t\t\tthis._newMessage = action.payload.content;\n \t\t\t\tthis.emitChange();\n \t\t\t\tbreak;\n\n \t\t\tcase 'submit-new-message':\n\t\t\t\tthis._checkSubmitNewMessage();\t\n\t\t\t\tthis.emitChange();\n \t\t\t\tbreak;\n \t\t}\n \t}\n\n \t_checkSubmitNewMessage(){\n \t\tif (this._newMessage.trim().length > 0) {\n\t\t\tlet message = {\n\t\t\t\tid: Date.now(),\n\t\t\t\tcontent: this._newMessage\n\t\t\t};\n\n\t\t\tthis._messageList.push(message);\n\t\t\tthis._newMessage = '';\n\n\t\t\t// this.setState({\n\t\t\t// \tmessageList: this.props.messageList,\n\t\t\t// \tnewMessage: ''\n\t\t\t// });\n\t\t}\n \t}\n\n \temitChange(){\n \t\tthis.emit(chatStoreChangeEvent);\n \t}\n\n \taddEventListener(callback){\n \t\tthis.on('chat-store-change-event', callback);\n \t}\n\n \tremoveEventListner(callback){\n \t\tthis.removeListener(chatStoreChangeEvent, callback);\n \t}\n\n}\n\nlet chatStore = new ChatStore();\n\nexport default chatStore;\n"]},"metadata":{},"sourceType":"module"}